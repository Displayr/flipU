if (dec != ".")
x1 <- chartr(dec, ".", x1)
x0 <- (xm[okP] == 0) != (as.numeric(x1) == 0)
if (length(not.both.0 <- which(x0 & !is.na(x0)))) {
Cf[okP][not.both.0] <- format(xm[okP][not.both.0], digits = max(1L,
digits - 1L))
}
if (any(ina))
Cf[ina] <- na.print
if (P.values) {
if (!is.logical(signif.stars) || is.na(signif.stars)) {
warning("option \"show.signif.stars\" is invalid: assuming TRUE")
signif.stars <- TRUE
}
if (any(okP <- ok[, nc])) {
pv <- as.vector(xm[, nc])
Cf[okP, nc] <- format.pval(pv[okP], digits = dig.tst,
eps = eps.Pvalue)
signif.stars <- signif.stars && any(pv[okP] < 0.1)
if (signif.stars) {
Signif <- symnum(pv, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
Cf <- cbind(Cf, format(Signif))
}
}
else signif.stars <- FALSE
}
else signif.stars <- FALSE
print.default(Cf, quote = FALSE, right = TRUE, na.print = na.print,
...)
if (signif.stars && signif.legend) {
if ((w <- getOption("width")) < nchar(sleg <- attr(Signif,
"legend")))
sleg <- strwrap(sleg, width = w - 2, prefix = "  ")
cat("---\nSignif. codes:  ", sleg, sep = "", fill = w +
4 + max(nchar(sleg, "bytes") - nchar(sleg)))
}
invisible(Cf)
}
dataTableWithRItemFormat(as.data.frame(printCoefmat.chris(z$summary$coefficients)))
dataTableWithRItemFormat(as.data.frame(printCoefmat.chris(z$summary$coefficients)), header.alignments = rep("right", ncol(z$summary$coefficients)))
tidied.table <- printCoefmat.chris(z$summary$coefficients)
dataTableWithRItemFormat(as.data.frame(tidied.table), header.alignments = rep("right", ncol(tidied.table)))
devtools::load_all(".")
devtools::load_all(".")
?printCoefmat
library(flipMultivariates)
data(bank)
zformula <- formula("Overall ~ Fees + Interest + Phone + Branch + Online + ATM")
missing <- "Use partial data (pairwise correlations)"
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, data = bank, missing = missing)
z
print.default(z)
names(z)
z$coefficients
z$summary
names(z$summary)
z$type
dt(1.96)
dt(1.96, df = Inf)
pt(0.95, df = inf)
pt(0.95, df = Inf)
qt(0.95, df = Inf)
qt(0.05, df = Inf)
qt(0.25, df = Inf)
qt(0.1, df = Inf)
qt(0.05, df = Inf)
qt(0.025, df = Inf)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
missing <- "Exclude cases with missing data")
missing <- "Exclude cases with missing data"
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Quasi-Poisson")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Binary Logit")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Ordered")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "NBD")
z
names(z)
names(z$summary)
?qz
qnorm(0.05)
qnorm(0.025)
qnorm(0.975)
print.Regression.chris <- function(x, p.cutoff = 0.05, ...)
{
if (!x$r.output)
{
# Make a pretty table with a caption
pretty.coefs <- x$summary$coefficients
pretty.coefs <- flipU::formatRegressionCoefficientMatrix(pretty.coefs)
dt <- flipU::dataTableWithRItemFormat(pretty.coefs, header.alignments = rep("right", ncol(pretty.coefs)))
test.info <- flipU::findTestInCoefficientTable(pretty.coefs)
# Highlight significant coefficients
if (test.info$test.type == "t")
{
t.val <- qt(p.cutoff / 2, df = x$summary$df)
addSignificanceHighlightingToDataTable(dt, columns.to.color = 1,
column.to.check = test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
} else if (test.info$test.type == "z") {
z.val <- qnorm(p.cutoff / 2)
addSignificanceHighlightingToDataTable(dt, columns.to.color = 1,
column.to.check = test.info$test.column,
red.value = z.val, blue.value = -1L * z.val)
}
print(dt)
} else {
# Print the regression as normal
normal.regression <- x
class(x) = class(x)[which(class(x) != "Regression")]
print(x)
}
}
devtools::load_all(".")
devtools::load_all(".")
z
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
z$r.output <- FALSE
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
findTestInCoefficientTable(z$summary$coefficients)
devtools::load_all(".")
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
z$r.output
devtools::load_all(".")
library(flipU)
z$r.output
print.Regression.chris(z)
library(flipU)
print.Regression.chris(z)
library(flipU)
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
library(flipMultivariates)
data(bank)
zformula <- formula("Overall ~ Fees + Interest + Phone + Branch + Online + ATM")
missing <- "Use partial data (pairwise correlations)"
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, data = bank, missing = missing)
print.Regression.chris(z)
z%r.output <- FALSE
z$r.output <- FALSE
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
p.cutoff <- 0.025
p.cutoff <- 0.05
qt(p.cutoff / 2, df = x$summary$df)
qt(p.cutoff / 2, df = z$summary$df)
p.cuttoff
p.cutoff
z$summary$df
s$summary
z$summary
Overall
bank
z$summary
names(z$summary)
names(z)
z$df.residual
devtools::load_all(".")
print.Regression.chris(z)
devtools::load_all(".")
print.Regression.chris(z)
?DT::formatStyle
devtools::load_all(".")
devtools::load_all(".")
print.Regression.chris(z)
x <- z
pretty.coefs <- x$summary$coefficients
pretty.coefs <- formatRegressionCoefficientMatrix(pretty.coefs)
pretty.coefs
dt <- flipU::dataTableWithRItemFormat(pretty.coefs, header.alignments = rep("right", ncol(pretty.coefs)))
dt
test.info <- flipU::findTestInCoefficientTable(pretty.coefs)
test.info
test.type == "t"
test.info$test.type == "t"
t.val <- qt(p.cutoff / 2, df = x$df.residual)
pretty.coefs$"t value"
class(pretty.coefs$"t value")
pretty.coefs$"t value"[1]
pretty.coefs$"t value"[2]
pretty.coefs$"t value"[2] > 10
pretty.coefs <- x$summary$coefficients
class(pretty.coefs)
class(pretty.coefs[1,1])
"13" > 10
devtools::load_all(".")
devtools::load_all(".")
print.Regression.chris(z)
z
x <- z
pretty.coefs <- x$summary$coefficients
pretty.coefs <- as.data.frame(pretty.coefs)
pretty.coefs
class(pretty.coefs)
lapply(pretty.coefs, class)
dt <- flipU::dataTableWithRItemFormat(pretty.coefs, header.alignments = rep("right", ncol(pretty.coefs)))
print(dt)
t.val <- qt(p.cutoff / 2, df = x$df.residual)
t.val
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
print(dt)
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
dt
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
dt
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
dt
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
dt
devtools::load_all(".")
dt <- addSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate",
column.to.check = "t value",#test.info$test.column,
red.value = t.val, blue.value = -1L * t.val)
dt
devtools::load_all(".")
print.Regression.chris(z)
prettyNum(z$summary$coefficients)
class(prettyNum(z$summary$coefficients))
formatC(z$summary$coefficients)
class(formatC(z$summary$coefficients))
numcol
numCol
numCols
numcols()
ncol
pretty.coefs
num.col <- ncol(pretty.coefs)
pretty.coefs[, 1:(num.col - 1)] <- round(pretty.coefs[, 1:(num.col - 1)], 6)
pretty.coefs
pretty.coefs[, num.col] <- formatC(pretty.coefs[, num.col])
pretty.coefs
pretty.coefs <- x$summary$coefficients
pretty.coefs <- as.data.frame(pretty.coefs)
pretty.coefs[, num.col] <- format.pval(pretty.coefs[, num.col])
pretty.coefs
lapply(pretty.coefs, class)
devtools::load_all(".")
print.Regression.chris(z)
missing <- "Imputation (replace missing values with estimates)"
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = type)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Linear")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Quasi-Poisson")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Binary Logit")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Ordered")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = bank$ID > 100,  weights = bank$ID, type = type
)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = bank$ID > 100,  weights = bank$ID, type = "Linear")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = bank$ID > 100,  weights = bank$ID, type = "Poisson")
z
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = bank$ID > 100,  weights = bank$ID, type = "Binary Logit")
z
missing <- "Exclude cases with missing data"
Regression(zformula, data = bank, subset = bank$ID > 100,  missing = missing)
z
Regression(zformula, data = bank, weights = bank$ID, missing = missing)
missing <- "Imputation (replace missing values with estimates)"
lm(zformula, data = bank)
summary(z)
missing <- "Use partial data (pairwise correlations)"
Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, data = bank, missing = missing)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, data = bank, missing = missing)
z
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
lm.D9
summary(lm.D9)
pcaPhoneTestData
data(pcaPhoneTestData)
pcaPhoneTestData
names(pcaPhoneTestData)
dd <- pcaPhoneTestData$data.set.original
names(dd)
lm(Allows.to.keep.in.touch ~ Technology.fascinating + Like.look.of.phones + Surprised.by.bill.size + Stops.other.people.monitoring, data = dd)
lm(Allows.to.keep.in.touch ~ Technology.fascinating - Like.look.of.phones + Surprised.by.bill.size + Stops.other.people.monitoring, data = dd)
lm(Allows.to.keep.in.touch ~ Technology.fascinating + Like.look.of.phones + Surprised.by.bill.size + Stops.other.people.monitoring, data = dd)
x <- lm(Allows.to.keep.in.touch ~ Technology.fascinating + Like.look.of.phones + Surprised.by.bill.size + Stops.other.people.monitoring, data = dd)
summary(x)
print.Regression.chris
print.Regression.chris(x)
lm$r.output <- FALSE
print.Regression.chris(x)
x$r.output <- FALSE
lm
print.Regression.chris(x)
x$r.output
pretty.coefs <- x$summary$coefficients
pretty.coefs
x$summary
x$summary <- summary(x)
print.Regression.chris(x)
dd
names(dd)
dd[, 2] <- -1*dd[,2]
x <- lm(Allows.to.keep.in.touch ~ Technology.fascinating + Like.look.of.phones + Surprised.by.bill.size + Stops.other.people.monitoring, data = dd)
x
x$summary <- summary(x)
x$r.output <- FALSE
print.Regression.chris(x)
qt(0.0384802)
x$df.residual
qt(0.0384802, 581)
qt(2* 0.0384802, 581)
qt(0.0384802/2, 581)
qt(0.025/2, 581)
?as.data.frame
devtools::load_all(".")
print.Regression.chris(x)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = type)
devtools::load_all(".")
Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = type)
library(flipMultivariates)
devtools::load_all(".")
Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = type)
Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
"Imputation (replace missing values with estimates)"
missing <- "Imputation (replace missing values with estimates)"
Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
print.Regression.chris(z)
z$r.output <- FALSE
print.Regression.chris(z)
missing <- "Exclude cases with missing data"
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = type)
z <- Regression(Overall ~ Fees + Interest + Phone + Branch + Online + ATM, missing = missing, data = bank, subset = TRUE,  weights = NULL, type = "Poisson")
z
z$r.output <- FALSE
print.Regression.chris(z)
qnorm(0.448271)
qnorm(0.448271/2)
qnorm(0.008246/2)
qnorm(0.036132/2)
?qnorm
pnorm(-0.7583)
pnorm(-0.7583)*2
pnorm(2.6418)*2
(1-pnorm(2.6418))*2
devtools::load_all(".")
library(flipU)
z$sample.description
library(flipMultivariates)
devtools::load_all(".")
print.Regression.chris(z)
dput
?dput
library(flipMultivariates`)
library(flipMultivariates)
zformula <- formula("Overall ~ Fees + Interest + Phone + Branch + Online + ATM")
data(bank)
sb <- bank$ID > 100
attr(sb, "label") <- "ID greater than 100"
wgt <- bank$ID
attr(wgt, "label") <- "ID"
missing <- "Exclude cases with missing data"
z <- Regression(zformula, data = bank, missing = missing)
z
devtools::load_all(".")
library(devtools)
install_github("numbersinternational/flipMultiVariates")
library(flipMultivariates)
install_github("numbersinternational/flipMultiVariates")
install("curl")
install_github("numbersinternational/flipMultiVariates")
library(curl)
install("curl")
install(curl)
install.packages("curl")
install.packages("curl")
install_github("numbersinternational/flipMultiVariates")
library(devtools)
instal.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("numbersinternational/flipMultiVariates")
zformula <- formula("Overall ~ Fees + Interest + Phone + Branch + Online + ATM")
data(bank)
sb <- bank$ID > 100
attr(sb, "label") <- "ID greater than 100"
wgt <- bank$ID
attr(wgt, "label") <- "ID"
library(flipMultivariates)
zformula <- formula("Overall ~ Fees + Interest + Phone + Branch + Online + ATM")
data(bank)
sb <- bank$ID > 100
attr(sb, "label") <- "ID greater than 100"
wgt <- bank$ID
attr(wgt, "label") <- "ID"
missing <- "Exclude cases with missing data"
z <- Regression(zformula, data = bank, missing = missing)
z
z$summary
x <- z$summary$coefficients
dput(x)
y <- structure(c(-2.12354266886328, 0.35430227088273, 0.277320094859762,
0.366753235995513, 0.291164750222808, 0.158226380968753, 0.229469583696884,
0.375947741901522, 0.0457968464770799, 0.0445643961169206, 0.0464111931711573,
0.0379447529295883, 0.042437145474349, 0.0414715092612246, -5.6485049175253,
7.73639012590198, 6.22290705190251, 7.90225829021425, 7.67338637737619,
3.72848784243494, 5.53318622313647, 4.23783947790291e-08, 2.26073008807065e-13,
1.94308676621562e-09, 7.78117175045146e-14, 3.37802828471921e-13,
0.000236436041614783, 7.66648022606539e-08), .Dim = c(7L, 4L), .Dimnames = list(
c("(Intercept)", "Fees", "Interest", "Phone", "Branch", "Online",
"ATM"), c("Estimate", "Std. Error", "t value", "Pr(>|t|)"
)))
y
devtools::load_all(".")
dataTableWithRItemFormat(y)
y
class(y)
createRegressionDataTable(y)
library(flipMultivariates)
library(flipMultivariates)
createRegressionDataTable(y)
flipMultivariates::createRegressionDataTable(y)
flipMultivariates:::createRegressionDataTable(y)
dataTableWithRItemFormat(y)
dataTableWithRItemFormat(as.data.frame(y))
y
test.dt <- DataTableWithRItemFormat(as.data.frame(test.summary))
devtools::load_all(".")
test.dt <- DataTableWithRItemFormat(as.data.frame(test.summary))
test.summary <- structure(c(-2.12354266886328, 0.35430227088273, 0.277320094859762,
0.366753235995513, 0.291164750222808, 0.158226380968753, 0.229469583696884,
0.375947741901522, 0.0457968464770799, 0.0445643961169206, 0.0464111931711573,
0.0379447529295883, 0.042437145474349, 0.0414715092612246, -5.6485049175253,
7.73639012590198, 6.22290705190251, 7.90225829021425, 7.67338637737619,
3.72848784243494, 5.53318622313647, 4.23783947790291e-08, 2.26073008807065e-13,
1.94308676621562e-09, 7.78117175045146e-14, 3.37802828471921e-13,
0.000236436041614783, 7.66648022606539e-08), .Dim = c(7L, 4L), .Dimnames = list(
c("(Intercept)", "Fees", "Interest", "Phone", "Branch", "Online",
"ATM"), c("Estimate", "Std. Error", "t value", "Pr(>|t|)"
)))
test.dt <- DataTableWithRItemFormat(as.data.frame(test.summary))
test.dt
AddSignificanceHighlightingToDataTable(dt, columns.to.color = "Estimate", column.to.check = "t value", red.value = -1.96, blue.value = 1.96)
AddSignificanceHighlightingToDataTable(test.dt, columns.to.color = "Estimate", column.to.check = "t value", red.value = -1.96, blue.value = 1.96)
my.df <- data.frame(First = c(1,2,3), Second = c("a", "b", "c"))
my.df
my.dt <- DataTableWithRItemFormat(my.df, caption = "A nice table")
my.dt
my.dt <- AddSignificanceHighlightingToDataTable(my.dt, columns.to.color = "Second", column.to.check = "First", red.value = 2, blue.value = 3)
my.dt
my.dt <- DataTableWithRItemFormat(my.df, caption = "A nice table")
my.dt
my.dt <- AddSignificanceHighlightingToDataTable(my.dt, columns.to.color = "Second", column.to.check = "First", red.value = 1, blue.value = 2.9)
my.dt
library(flipU)
?AddSignificanceHighlightingToDataTable
install.packages(roxygen2)
install.packages("roxygen2")
devtools::load_all(".")
library(flipU)
?AddSignificanceHighlightingToDataTable
?AddSignificanceHighlightingToDataTable
devtools::load_all(".")
?AddSignificanceHighlightingToDataTable
library(flipU)
?AddSignificanceHighlightingToDataTable
devtools::load_all(".")
?AddSignificanceHighlightingToDataTable
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(flipU)
library(flipU)
